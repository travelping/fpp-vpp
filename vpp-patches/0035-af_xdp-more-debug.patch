From 3f72e90233bf580bad55a8b0ce55c3a4752e3d18 Mon Sep 17 00:00:00 2001
From: Vladimir Zhigulin <vladimir.jigulin@travelping.com>
Date: Sat, 28 Jun 2025 13:24:21 +0200
Subject: [PATCH 35/35] af_xdp: more debug

---
 src/plugins/af_xdp/af_xdp.h |  1 +
 src/plugins/af_xdp/device.c | 84 ++++++++++++++++++-------------------
 src/plugins/af_xdp/format.c |  6 +++
 src/plugins/af_xdp/input.c  |  4 +-
 4 files changed, 52 insertions(+), 43 deletions(-)

diff --git a/src/plugins/af_xdp/af_xdp.h b/src/plugins/af_xdp/af_xdp.h
index ff0a64f4f..04eb2ea98 100644
--- a/src/plugins/af_xdp/af_xdp.h
+++ b/src/plugins/af_xdp/af_xdp.h
@@ -73,6 +73,7 @@ typedef struct
 
   uword file_index;
   u32 queue_index;
+  u8 failed:1;
   af_xdp_rxq_mode_t mode;
 } af_xdp_rxq_t;
 
diff --git a/src/plugins/af_xdp/device.c b/src/plugins/af_xdp/device.c
index 43dd13532..bc984a99c 100644
--- a/src/plugins/af_xdp/device.c
+++ b/src/plugins/af_xdp/device.c
@@ -54,14 +54,14 @@ gdb_af_xdp_get_prod (const struct xsk_ring_prod *prod)
 }
 
 gdb_af_xdp_pair_t
-gdb_af_xdp_get_cons (const struct xsk_ring_cons * cons)
+gdb_af_xdp_get_cons (const struct xsk_ring_cons *cons)
 {
   gdb_af_xdp_pair_t pair = { *cons->producer, *cons->consumer };
   return pair;
 }
 
 static clib_error_t *
-af_xdp_mac_change (vnet_hw_interface_t * hw, const u8 * old, const u8 * new)
+af_xdp_mac_change (vnet_hw_interface_t *hw, const u8 *old, const u8 *new)
 {
   af_xdp_main_t *am = &af_xdp_main;
   af_xdp_device_t *ad = vec_elt_at_index (am->devices, hw->dev_instance);
@@ -83,7 +83,7 @@ af_xdp_set_max_frame_size (vnet_main_t *vnm, vnet_hw_interface_t *hw,
 }
 
 static u32
-af_xdp_flag_change (vnet_main_t * vnm, vnet_hw_interface_t * hw, u32 flags)
+af_xdp_flag_change (vnet_main_t *vnm, vnet_hw_interface_t *hw, u32 flags)
 {
   af_xdp_main_t *am = &af_xdp_main;
   af_xdp_device_t *ad = vec_elt_at_index (am->devices, hw->dev_instance);
@@ -94,8 +94,7 @@ af_xdp_flag_change (vnet_main_t * vnm, vnet_hw_interface_t * hw, u32 flags)
       af_xdp_log (VLIB_LOG_LEVEL_ERR, ad, "set unicast not supported yet");
       return ~0;
     case ETHERNET_INTERFACE_FLAG_ACCEPT_ALL:
-      af_xdp_log (VLIB_LOG_LEVEL_ERR, ad,
-		  "set promiscuous not supported yet");
+      af_xdp_log (VLIB_LOG_LEVEL_ERR, ad, "set promiscuous not supported yet");
       return ~0;
     }
 
@@ -153,8 +152,7 @@ af_xdp_remove_program (af_xdp_device_t *ad)
   int ns_fds[2];
 
   af_xdp_enter_netns (ad->netns, ns_fds);
-  ret = bpf_xdp_query_id (ad->linux_ifindex, ad->bpf_xdp_flags,
-			  &curr_prog_id);
+  ret = bpf_xdp_query_id (ad->linux_ifindex, ad->bpf_xdp_flags, &curr_prog_id);
   if (ret != 0)
     {
       af_xdp_log (VLIB_LOG_LEVEL_ERR, ad, "bpf_xdp_query_id failed\n");
@@ -179,7 +177,7 @@ err0:
 }
 
 void
-af_xdp_delete_if (vlib_main_t * vm, af_xdp_device_t * ad)
+af_xdp_delete_if (vlib_main_t *vm, af_xdp_device_t *ad)
 {
   vnet_main_t *vnm = vnet_get_main ();
   af_xdp_main_t *axm = &af_xdp_main;
@@ -196,8 +194,10 @@ af_xdp_delete_if (vlib_main_t * vm, af_xdp_device_t * ad)
   for (i = 0; i < ad->txq_num; i++)
     clib_spinlock_free (&vec_elt (ad->txqs, i).lock);
 
-  vec_foreach (xsk, ad->xsk)
+  vec_foreach (xsk, ad->xsk) {
+	  clib_warning ("DEBUG: deleting fd %d for xsk socket %d", *xsk, xsk - ad->xsk);
     xsk_socket__delete (*xsk);
+  }
 
   vec_foreach (umem, ad->umem)
     xsk_umem__delete (*umem);
@@ -221,7 +221,7 @@ af_xdp_delete_if (vlib_main_t * vm, af_xdp_device_t * ad)
 }
 
 static int
-af_xdp_load_program (af_xdp_create_if_args_t * args, af_xdp_device_t * ad)
+af_xdp_load_program (af_xdp_create_if_args_t *args, af_xdp_device_t *ad)
 {
   int fd;
   struct bpf_program *bpf_prog;
@@ -306,9 +306,9 @@ af_xdp_create_queue (vlib_main_t *vm, af_xdp_create_if_args_t *args,
     sizeof (vlib_buffer_t) + vlib_buffer_get_default_data_size (vm);
   umem_config.frame_headroom = sizeof (vlib_buffer_t);
   umem_config.flags = XDP_UMEM_UNALIGNED_CHUNK_FLAG;
-  if (xsk_umem__create
-      (umem, uword_to_pointer (vm->buffer_main->buffer_mem_start, void *),
-       vm->buffer_main->buffer_mem_size, fq, cq, &umem_config))
+  if (xsk_umem__create (
+	umem, uword_to_pointer (vm->buffer_main->buffer_mem_start, void *),
+	vm->buffer_main->buffer_mem_size, fq, cq, &umem_config))
     {
       uword sys_page_size = clib_mem_get_page_size ();
       args->rv = VNET_API_ERROR_SYSCALL_ERROR_1;
@@ -342,18 +342,20 @@ af_xdp_create_queue (vlib_main_t *vm, af_xdp_create_if_args_t *args,
     }
   if (args->prog)
     sock_config.libbpf_flags = XSK_LIBBPF_FLAGS__INHIBIT_PROG_LOAD;
-  if (xsk_socket__create
-      (xsk, ad->linux_ifname, qid, *umem, rx, tx, &sock_config))
+  if (xsk_socket__create (xsk, ad->linux_ifname, qid, *umem, rx, tx,
+			  &sock_config))
     {
       args->rv = VNET_API_ERROR_SYSCALL_ERROR_2;
-      args->error =
-	clib_error_return_unix (0,
-				"xsk_socket__create() failed (is linux netdev %s up?)",
-				ad->linux_ifname);
+      args->error = clib_error_return_unix (
+	0, "xsk_socket__create() failed (is linux netdev %s up?)",
+	ad->linux_ifname);
       goto err1;
     }
 
   fd = xsk_socket__fd (*xsk);
+  clib_warning ("DEBUG: created fd %d for iface %s queue %d is_rx %d is_tx %d", fd,
+		ad->linux_ifname, qid, is_rx, is_tx);
+
   if (args->prog)
     {
       struct bpf_map *map =
@@ -466,7 +468,7 @@ af_xdp_get_q_count (const char *ifname, int *rxq_num, int *txq_num)
 }
 
 static clib_error_t *
-af_xdp_device_rxq_read_ready (clib_file_t * f)
+af_xdp_device_rxq_read_ready (clib_file_t *f)
 {
   vnet_hw_if_rx_queue_set_int_pending (vnet_get_main (), f->private_data);
   return 0;
@@ -572,7 +574,7 @@ af_xdp_finalize_queues (vnet_main_t *vnm, af_xdp_device_t *ad,
 }
 
 void
-af_xdp_create_if (vlib_main_t * vm, af_xdp_create_if_args_t * args)
+af_xdp_create_if (vlib_main_t *vm, af_xdp_create_if_args_t *args)
 {
   vnet_main_t *vnm = vnet_get_main ();
   vlib_thread_main_t *tm = vlib_get_thread_main ();
@@ -600,10 +602,9 @@ af_xdp_create_if (vlib_main_t * vm, af_xdp_create_if_args_t * args)
       !is_pow2 (args->rxq_size) || !is_pow2 (args->txq_size))
     {
       args->rv = VNET_API_ERROR_INVALID_VALUE;
-      args->error =
-	clib_error_return (0,
-			   "queue size must be a power of two between %i and 65535",
-			   VLIB_FRAME_SIZE);
+      args->error = clib_error_return (
+	0, "queue size must be a power of two between %i and 65535",
+	VLIB_FRAME_SIZE);
       goto err0;
     }
 
@@ -634,13 +635,16 @@ af_xdp_create_if (vlib_main_t * vm, af_xdp_create_if_args_t * args)
     ad->flags |= AF_XDP_DEVICE_F_SYSCALL_LOCK;
 
   ad->bpf_xdp_flags = XDP_FLAGS_UPDATE_IF_NOEXIST;
-  if (args->flags & AF_XDP_CREATE_FLAGS_MODE_SKB) {
-    ad->flags |= AF_XDP_DEVICE_F_MODE_SKB;
-    ad->bpf_xdp_flags |= XDP_FLAGS_SKB_MODE;
-  }
+  if (args->flags & AF_XDP_CREATE_FLAGS_MODE_SKB)
+    {
+      ad->flags |= AF_XDP_DEVICE_F_MODE_SKB;
+      ad->bpf_xdp_flags |= XDP_FLAGS_SKB_MODE;
+    }
 
   ad->linux_ifname = (char *) format (0, "%s", args->linux_ifname);
-  vec_validate (ad->linux_ifname, IFNAMSIZ - 1);	/* libbpf expects ifname to be at least IFNAMSIZ */
+  vec_validate (ad->linux_ifname,
+		IFNAMSIZ -
+		  1); /* libbpf expects ifname to be at least IFNAMSIZ */
 
   if (args->netns)
     ad->netns = (char *) format (0, "%s%c", args->netns, 0);
@@ -699,7 +703,6 @@ af_xdp_create_if (vlib_main_t * vm, af_xdp_create_if_args_t * args)
 			    out */
 	    }
 
-
 	  args->rv = 0;
 	  clib_error_free (args->error);
 	  break;
@@ -715,10 +718,8 @@ af_xdp_create_if (vlib_main_t * vm, af_xdp_create_if_args_t * args)
 
   ad->dev_instance = ad - am->devices;
   ad->per_interface_next_index = VNET_DEVICE_INPUT_NEXT_ETHERNET_INPUT;
-  ad->pool =
-    vlib_buffer_pool_get_default_for_numa (vm,
-					   af_xdp_get_numa
-					   (ad->linux_ifname));
+  ad->pool = vlib_buffer_pool_get_default_for_numa (
+    vm, af_xdp_get_numa (ad->linux_ifname));
   if (!args->name)
     {
       char *ifname = ad->linux_ifname;
@@ -762,7 +763,7 @@ af_xdp_create_if (vlib_main_t * vm, af_xdp_create_if_args_t * args)
   ad->buffer_template->flags = VLIB_BUFFER_TOTAL_LENGTH_VALID;
   ad->buffer_template->ref_count = 1;
   vnet_buffer (ad->buffer_template)->sw_if_index[VLIB_RX] = ad->sw_if_index;
-  vnet_buffer (ad->buffer_template)->sw_if_index[VLIB_TX] = (u32) ~ 0;
+  vnet_buffer (ad->buffer_template)->sw_if_index[VLIB_TX] = (u32) ~0;
   ad->buffer_template->buffer_pool_index = ad->pool;
 
   return;
@@ -776,7 +777,7 @@ err0:
 }
 
 static clib_error_t *
-af_xdp_interface_admin_up_down (vnet_main_t * vnm, u32 hw_if_index, u32 flags)
+af_xdp_interface_admin_up_down (vnet_main_t *vnm, u32 hw_if_index, u32 flags)
 {
   vnet_hw_interface_t *hi = vnet_get_hw_interface (vnm, hw_if_index);
   af_xdp_main_t *am = &af_xdp_main;
@@ -829,7 +830,7 @@ af_xdp_interface_rx_mode_change (vnet_main_t *vnm, u32 hw_if_index, u32 qid,
 }
 
 static void
-af_xdp_set_interface_next_node (vnet_main_t * vnm, u32 hw_if_index,
+af_xdp_set_interface_next_node (vnet_main_t *vnm, u32 hw_if_index,
 				u32 node_index)
 {
   af_xdp_main_t *am = &af_xdp_main;
@@ -844,12 +845,11 @@ af_xdp_set_interface_next_node (vnet_main_t * vnm, u32 hw_if_index,
     }
 
   ad->per_interface_next_index =
-    vlib_node_add_next (vlib_get_main (), af_xdp_input_node.index,
-			node_index);
+    vlib_node_add_next (vlib_get_main (), af_xdp_input_node.index, node_index);
 }
 
 static char *af_xdp_tx_func_error_strings[] = {
-#define _(n,s) s,
+#define _(n, s) s,
   foreach_af_xdp_tx_func_error
 #undef _
 };
@@ -878,7 +878,7 @@ VNET_DEVICE_CLASS (af_xdp_device_class) = {
 /* *INDENT-ON* */
 
 clib_error_t *
-af_xdp_init (vlib_main_t * vm)
+af_xdp_init (vlib_main_t *vm)
 {
   af_xdp_main_t *am = &af_xdp_main;
 
diff --git a/src/plugins/af_xdp/format.c b/src/plugins/af_xdp/format.c
index acdc70e6a..08237bf9c 100644
--- a/src/plugins/af_xdp/format.c
+++ b/src/plugins/af_xdp/format.c
@@ -61,6 +61,12 @@ format_af_xdp_device (u8 * s, va_list * args)
     s = format (s, "\n%Uerror %U", format_white_space, indent,
 		format_clib_error, ad->error);
 
+  af_xdp_rxq_t *rxq;
+  vec_foreach(rxq, ad->rxqs) {
+    if (rxq->failed)
+      s = format(s, "\nfailed queue %d", rxq - ad->rxqs);
+  }
+
   return s;
 }
 
diff --git a/src/plugins/af_xdp/input.c b/src/plugins/af_xdp/input.c
index e0b202b44..a52fced64 100644
--- a/src/plugins/af_xdp/input.c
+++ b/src/plugins/af_xdp/input.c
@@ -89,14 +89,16 @@ af_xdp_device_input_refill_db (vlib_main_t * vm,
   if (clib_spinlock_trylock_if_init (&rxq->syscall_lock))
     {
       int ret = recvmsg (rxq->xsk_fd, 0, MSG_DONTWAIT);
+      clib_warning("recvmsg on fd %d iface %s queue %d ret %d (%s)", rxq->xsk_fd, ad->linux_ifname, rxq - ad->rxqs, ret, strerror(ret));
       clib_spinlock_unlock_if_init (&rxq->syscall_lock);
       if (PREDICT_FALSE (ret < 0))
 	{
+	  rxq->failed = 1;
 	  /* something bad is happening */
 	  if (node)
 	    vlib_error_count (vm, node->node_index,
 			      AF_XDP_INPUT_ERROR_SYSCALL_FAILURES, 1);
-	  af_xdp_device_error (ad, "rx poll() failed: %s (errno %d)", strerror(ret), ret);
+	  af_xdp_device_error (ad, "rx poll()");
 	}
     }
 }
-- 
2.49.0

