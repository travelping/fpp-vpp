From 530df8f9b96a2b0ec8bed26c3ef6ada17edc51ea Mon Sep 17 00:00:00 2001
From: Sergey Matov <sergey.matov@travelping.com>
Date: Mon, 14 Feb 2022 11:08:33 +0400
Subject: [PATCH] [UPG-VPP] Controlled CG-NAT function

---
 src/plugins/nat/nat44-ed/nat44_ed.c         | 208 ++++++++++++++++++++
 src/plugins/nat/nat44-ed/nat44_ed.h         |  44 +++++
 src/plugins/nat/nat44-ed/nat44_ed_cli.c     |  69 +++++++
 src/plugins/nat/nat44-ed/nat44_ed_in2out.c  |  79 +++++++-
 src/plugins/nat/nat44-ed/nat44_ed_inlines.h |  39 ++++
 5 files changed, 437 insertions(+), 2 deletions(-)

diff --git a/src/plugins/nat/nat44-ed/nat44_ed.c b/src/plugins/nat/nat44-ed/nat44_ed.c
index d3ef3d54f..4b5e015e6 100644
--- a/src/plugins/nat/nat44-ed/nat44_ed.c
+++ b/src/plugins/nat/nat44-ed/nat44_ed.c
@@ -193,6 +193,34 @@ static int nat44_ed_del_static_mapping_internal (ip4_address_t l_addr,
 
 u32 nat_calc_bihash_buckets (u32 n_elts);
 
+u8 *
+format_binding_key (u8 * s, va_list * args)
+{
+  u64 key = va_arg (*args, u64);
+
+  ip4_address_t addr;
+  u16 s_port;
+  u16 e_port;
+
+  split_binding_key (key, &addr, &s_port, &e_port);
+
+  s = format (s, "%U start_port %d end_port %d",
+              format_ip4_address, &addr,
+              clib_net_to_host_u16 (s_port), clib_net_to_host_u16 (e_port));
+  return s;
+}
+
+u8 *
+format_binding_mapping_kvp (u8 * s, va_list * args)
+{
+  clib_bihash_kv_8_8_t *v = va_arg (*args, clib_bihash_kv_8_8_t *);
+
+  s = format (s, "%U binding-mapping-index %llu",
+              format_binding_key, v->key, v->value);
+
+  return s;
+}
+
 u8 *
 format_ed_session_kvp (u8 * s, va_list * args)
 {
@@ -2362,6 +2390,7 @@ VLIB_INIT_FUNCTION (nat_init);
 int
 nat44_plugin_enable (nat44_config_t c)
 {
+  void (*controlled_nat_report_port) (vlib_buffer_t *, u16);
   snat_main_t *sm = &snat_main;
 
   fail_if_enabled ();
@@ -2420,12 +2449,188 @@ nat44_plugin_enable (nat44_config_t c)
 	}
     }
 
+  /* Controlled NAT settings */
+  sm->controlled = 0;
+  controlled_nat_report_port = vlib_get_plugin_symbol
+    ("upf_plugin.so", "upf_nat_get_src_port");
+  sm->nat44_ed_controlled_report_src_port = controlled_nat_report_port;
+
+  clib_bihash_init_8_8 (&sm->binding_mapping_by_external,
+                        "binding_mapping_by_external",
+                        sm->translation_buckets, 0);
+  clib_bihash_set_kvp_format_fn_8_8 (&sm->binding_mapping_by_external,
+                                     format_binding_mapping_kvp);
+
   sm->enabled = 1;
   sm->rconfig = c;
 
   return 0;
 }
 
+snat_binding_t *
+nat_ed_get_binding (snat_main_per_thread_data_t * tsm, ip4_address_t addr)
+{
+  uword *p = NULL;
+  p = mhash_get (&tsm->binding_index_by_ip, &addr);
+  if (!p)
+    return NULL;
+
+  return pool_elt_at_index (tsm->bindings, p[0]);
+}
+
+void
+nat_ed_del_sessions_per_binding (snat_main_per_thread_data_t * tsm,
+                              snat_binding_t * bn)
+{
+  snat_main_t *sm = &snat_main;
+  snat_session_t *ses;
+  u32 *ses_idx = 0;
+  snat_binding_t *this_bn;
+
+  vec_foreach (ses_idx, bn->bound_sessions)
+  {
+    if (pool_is_free_index (tsm->sessions, ses_idx[0]))
+      continue;
+    ses = pool_elt_at_index (tsm->sessions, ses_idx[0]);
+    this_bn = ses->binding;
+    if (!this_bn)
+      return;
+    if ((this_bn->external_addr.as_u32 == bn->external_addr.as_u32)
+        && (this_bn->framed_addr.as_u32 == bn->framed_addr.as_u32)
+        && (this_bn->start_port == bn->start_port)
+        && (this_bn->end_port == bn->end_port))
+      {
+        nat44_ed_free_session_data (sm, ses, tsm - sm->per_thread_data, 0);
+        nat_ed_session_delete (sm, ses, tsm - sm->per_thread_data, 1);
+      }
+  }
+
+}
+
+int
+verify_nat_binding (snat_binding_t * bn)
+{
+  snat_main_t *sm = &snat_main;
+
+  clib_bihash_kv_8_8_t kv, value;
+
+  init_binding_k (&kv, bn->external_addr, bn->start_port, bn->end_port);
+  if (!clib_bihash_search_8_8 (&sm->binding_mapping_by_external, &kv, &value))
+    {
+      return 1;
+    }
+  return 0;
+}
+
+u16
+nat_ed_calc_block (ip4_address_t ext_addr, u16 start_port, u16 block_size)
+{
+  snat_main_t *sm = &snat_main;
+  clib_bihash_kv_8_8_t kv, value;
+  u16 start, end = 0;
+
+  start = start_port;
+  end = start + block_size - 1;
+
+  while (end < NAT_CONTROLLED_MAX_PORT)
+    {
+      init_binding_k (&kv, ext_addr, start, end);
+      if (clib_bihash_search_8_8
+          (&sm->binding_mapping_by_external, &kv, &value))
+        return start;
+
+      start += block_size;
+      end += block_size;
+    }
+
+  return 0;
+
+}
+
+u16
+nat_ed_add_binding (snat_main_per_thread_data_t * tsm, ip4_address_t user_addr,
+                 ip4_address_t ext_addr, u16 min_port, u16 block_size)
+{
+  snat_main_t *sm = &snat_main;
+  snat_binding_t *bn = NULL;
+  clib_bihash_kv_8_8_t kv;
+  u16 start_port;
+  u16 end_port;
+  uword *p = NULL;
+
+  p = mhash_get (&tsm->binding_index_by_ip, &user_addr);
+  if (p)
+    return 0;
+
+  start_port = nat_ed_calc_block (ext_addr, min_port, block_size);
+
+  if (!start_port)
+    {
+      nat_log_debug ("NAT Controlled: Can't find start port for given addr %U",
+                 format_ip4_address, &ext_addr);
+      return 0;
+    }
+
+  end_port = start_port + block_size - 1;
+
+  pool_get (tsm->bindings, bn);
+  memset (bn, 0, sizeof (*bn));
+  bn->framed_addr = user_addr;
+  bn->external_addr = ext_addr;
+  bn->start_port = start_port;
+  bn->end_port = end_port;
+
+  mhash_set (&tsm->binding_index_by_ip, &bn->framed_addr, bn - tsm->bindings,
+             NULL);
+  init_binding_kv (&kv, bn->external_addr, bn->start_port, bn->end_port,
+                   bn - tsm->bindings);
+  clib_bihash_add_del_8_8 (&sm->binding_mapping_by_external, &kv, 1);
+
+  return start_port;
+}
+
+u16
+nat_ed_create_binding (ip4_address_t user_addr, ip4_address_t ext_addr,
+                    u16 min_port, u16 block_size)
+{
+  snat_main_t *sm = &snat_main;
+  snat_main_per_thread_data_t *tsm = &sm->per_thread_data[0];
+  u16 start_block;
+
+  start_block =
+    nat_ed_add_binding (tsm, user_addr, ext_addr, min_port, block_size);
+
+  return start_block;
+}
+
+int
+nat_ed_del_binding (ip4_address_t user_addr)
+{
+  snat_main_t *sm = &snat_main;
+  snat_main_per_thread_data_t *tsm;
+  clib_bihash_kv_8_8_t kv;
+  snat_binding_t *bn = NULL;
+  uword *p = NULL;
+
+  vec_foreach (tsm, sm->per_thread_data)
+  {
+    p = mhash_get (&tsm->binding_index_by_ip, &user_addr);
+    if (p)
+      {
+        bn = pool_elt_at_index (tsm->bindings, p[0]);
+        nat_ed_del_sessions_per_binding (tsm, bn);
+        mhash_unset (&tsm->binding_index_by_ip, &bn->framed_addr, NULL);
+        init_binding_k (&kv, bn->external_addr, bn->start_port, bn->end_port);
+        if (clib_bihash_add_del_8_8
+            (&sm->binding_mapping_by_external, &kv, 0))
+          nat_log_debug ("Binding by external key del failed");
+        vec_free (bn->bound_sessions);
+        pool_put (tsm->bindings, bn);
+      }
+  }
+  return 0;
+}
+
 int
 nat44_ed_del_addresses ()
 {
@@ -3179,6 +3384,9 @@ nat44_ed_worker_db_init (snat_main_per_thread_data_t *tsm, u32 translations,
   pool_get (tsm->lru_pool, head);
   tsm->unk_proto_lru_head_index = head - tsm->lru_pool;
   clib_dlist_init (tsm->lru_pool, tsm->unk_proto_lru_head_index);
+
+  mhash_init (&tsm->binding_index_by_ip, sizeof (uword),
+              sizeof (ip4_address_t));
 }
 
 static void
diff --git a/src/plugins/nat/nat44-ed/nat44_ed.h b/src/plugins/nat/nat44-ed/nat44_ed.h
index 9772f1ec7..ced6d793e 100644
--- a/src/plugins/nat/nat44-ed/nat44_ed.h
+++ b/src/plugins/nat/nat44-ed/nat44_ed.h
@@ -195,6 +195,16 @@ typedef enum
 #define NAT_SM_FLAG_LB		   (1 << 7)
 #define NAT_SM_FLAG_SWITCH_ADDRESS (1 << 8)
 
+typedef struct
+{
+  ip4_address_t framed_addr;
+  ip4_address_t external_addr;
+  u16 start_port;
+  u16 end_port;
+  u16 block_size;
+  u32 *bound_sessions;
+} snat_binding_t;
+
 typedef CLIB_PACKED(struct
 {
   // number of sessions in this vrf
@@ -350,6 +360,8 @@ typedef CLIB_PACKED(struct
   u32 per_vrf_sessions_index;
 
   u32 thread_index;
+  snat_binding_t *binding;
+
 }) snat_session_t;
 
 typedef struct
@@ -496,6 +508,9 @@ typedef struct
 
   per_vrf_sessions_t *per_vrf_sessions_vec;
 
+  mhash_t binding_index_by_ip;
+  snat_binding_t *bindings;
+
 } snat_main_per_thread_data_t;
 
 struct snat_main_s;
@@ -666,6 +681,14 @@ typedef struct snat_main_s
   /* nat44 plugin enabled */
   u8 enabled;
 
+  /* Find a nat binding by external */
+  clib_bihash_8_8_t binding_mapping_by_external;
+  /* UPG: Controlled NAT function */
+  u8 controlled;
+
+  /* Controlled NAT hook for IPFIX */
+  void (*nat44_ed_controlled_report_src_port) (vlib_buffer_t *, u16 port);
+
   vnet_main_t *vnet_main;
 
 } snat_main_t;
@@ -703,6 +726,7 @@ extern fib_source_t nat_fib_src_hi;
 extern fib_source_t nat_fib_src_low;
 
 /* format functions */
+format_function_t format_binding_key;
 format_function_t format_snat_static_mapping;
 format_function_t format_snat_static_map_to_resolve;
 format_function_t format_snat_session;
@@ -1028,6 +1052,26 @@ format_function_t format_nat_ed_translation_error;
 format_function_t format_nat_6t_flow;
 format_function_t format_ed_session_kvp;
 
+snat_binding_t* nat_ed_get_binding (snat_main_per_thread_data_t * tsm,
+                                 ip4_address_t addr);
+
+void
+nat_ed_del_sessions_per_binding (snat_main_per_thread_data_t * tsm,
+                              snat_binding_t * bn);
+
+u16
+nat_ed_add_binding (snat_main_per_thread_data_t * tsm, ip4_address_t user_addr,
+                 ip4_address_t ext_addr, u16 start_port, u16 end_port);
+
+#define NAT_CONTROLLED_MAX_PORT 64000
+__clib_export int nat_ed_del_binding (ip4_address_t user_addr);
+
+__clib_export u16
+nat_ed_create_binding (ip4_address_t user_addr, ip4_address_t ext_addr,
+                    u16 min_port, u16 block_size);
+__clib_export u16 nat_ed_calc_block (ip4_address_t ext_addr, u16 start_port,
+                                  u16 block_size);
+
 snat_static_mapping_t *nat44_ed_sm_i2o_lookup (snat_main_t *sm,
 					       ip4_address_t addr, u16 port,
 					       u32 fib_index, u8 proto);
diff --git a/src/plugins/nat/nat44-ed/nat44_ed_cli.c b/src/plugins/nat/nat44-ed/nat44_ed_cli.c
index cfd362786..e359ad7fb 100644
--- a/src/plugins/nat/nat44-ed/nat44_ed_cli.c
+++ b/src/plugins/nat/nat44-ed/nat44_ed_cli.c
@@ -1707,6 +1707,61 @@ done:
   return error;
 }
 
+static clib_error_t *
+nat_controlled_set_command_fn (vlib_main_t * vm,
+                                unformat_input_t * input,
+                                vlib_cli_command_t * cmd)
+{
+  snat_main_t *sm = &snat_main;
+  unformat_input_t _line_input, *line_input = &_line_input;
+  clib_error_t *error = 0;
+
+  if (!unformat_user (input, unformat_line_input, line_input))
+    return clib_error_return (0, "'enable' or 'disable' expected");
+
+  while (unformat_check_input (line_input) != UNFORMAT_END_OF_INPUT)
+    {
+      if (unformat (line_input, "enable"))
+        {
+          sm->controlled = 1;
+        }
+      else if (unformat (line_input, "disable"))
+        {
+          sm->controlled = 0;
+        }
+      else
+        {
+          error = clib_error_return (0, "unknown input '%U'",
+                                     format_unformat_error, line_input);
+        }
+    }
+
+  return error;
+
+}
+
+static clib_error_t *
+nat_show_nat_bindings_command_fn (vlib_main_t * vm, unformat_input_t * input,
+                                   vlib_cli_command_t * cmd)
+{
+  snat_main_t *sm = &snat_main;
+  snat_main_per_thread_data_t *tsm = &sm->per_thread_data[0];
+  snat_binding_t *bn;
+
+  {
+    pool_foreach (bn, tsm->bindings)
+    {
+      vlib_cli_output (vm, "  FRAMED: %U", format_ip4_address,
+                       &bn->framed_addr);
+      vlib_cli_output (vm, "  EXTERNAL: %U", format_ip4_address,
+                       &bn->external_addr);
+      vlib_cli_output (vm, "  port start %u port end %u\n", bn->start_port,
+                       bn->end_port);
+    }
+  }
+  return NULL;
+}
+
 /*?
  * @cliexpar
  * @cliexstart{nat44}
@@ -2161,6 +2216,20 @@ VLIB_CLI_COMMAND (snat_forwarding_set_command, static) = {
   .function = snat_forwarding_set_command_fn,
 };
 
+/* *INDENT-OFF* */
+VLIB_CLI_COMMAND (nat_controlled_set_command, static) = {
+  .path = "nat44 controlled",
+  .short_help = "nat44 controlled enable|disable",
+  .function = nat_controlled_set_command_fn,
+};
+
+VLIB_CLI_COMMAND (nat_show_nat_bindings_command, static) = {
+  .path = "show nat44 bindings",
+  .short_help = "show nat44 bindings",
+  .function = nat_show_nat_bindings_command_fn,
+};
+/* *INDENT-ON* */
+
 /*
  * fd.io coding-style-patch-verification: ON
  *
diff --git a/src/plugins/nat/nat44-ed/nat44_ed_in2out.c b/src/plugins/nat/nat44-ed/nat44_ed_in2out.c
index 23e0957da..4b3969bdb 100644
--- a/src/plugins/nat/nat44-ed/nat44_ed_in2out.c
+++ b/src/plugins/nat/nat44-ed/nat44_ed_in2out.c
@@ -158,6 +158,62 @@ snat_not_translate_fast (snat_main_t *sm, vlib_node_runtime_t *node,
   return 1;
 }
 
+static int
+nat_controlled_alloc_addr_and_port (snat_main_t * sm,
+                                    u32 thread_index, u8 proto,
+                                    u32 snat_thread_index, snat_session_t * s,
+                                    ip4_address_t * outside_addr,
+                                    u16 * outside_port,
+                                    u32 buf_out_fib_index)
+{
+  snat_main_per_thread_data_t *tsm = &sm->per_thread_data[thread_index];
+  snat_binding_t *bn;
+  ip4_address_t ext_addr;
+  u16 start_port;
+  u16 end_port;
+  u16 attempts;
+
+  bn = nat_ed_get_binding (tsm, s->in2out.addr);
+
+  if (!bn)
+    {
+      return 1;
+    }
+
+  s->out2in.fib_index = buf_out_fib_index;
+  start_port = bn->start_port;
+  end_port = bn->end_port;
+  ext_addr.as_u32 = bn->external_addr.as_u32;
+  outside_addr->as_u32 = ext_addr.as_u32;
+
+  u16 port = clib_net_to_host_u16 (*outside_port);
+  if (port < start_port || port > end_port)
+    port = start_port;
+  attempts = end_port - start_port;
+  s->o2i.match.daddr.as_u32 = ext_addr.as_u32;
+  do
+    {
+      if (IP_PROTOCOL_ICMP == proto)
+        {
+          s->o2i.match.sport = clib_host_to_net_u16 (port);
+        }
+      s->o2i.match.dport = clib_host_to_net_u16 (port);
+      if (0 == nat_ed_ses_o2i_flow_hash_add_del (sm, thread_index, s, 2))
+        {
+          *outside_port = clib_host_to_net_u16 (port);
+          vec_add1 (bn->bound_sessions, s - tsm->sessions);
+          s->binding = bn;
+          return 0;
+        }
+      ++port;
+      --attempts;
+    }
+  while (attempts > 0);
+
+  /* Totally out of translations to use... */
+  return 1;
+}
+
 static int
 nat_ed_alloc_addr_and_port_with_snat_address (
   snat_main_t *sm, u8 proto, u32 thread_index, snat_address_t *a,
@@ -428,6 +484,10 @@ slow_path_ed (vlib_main_t *vm, snat_main_t *sm, vlib_buffer_t *b,
       break;
     }
 
+  /* Controlled NAT: we expect ingress traffic to stay in same FIB */
+  if (sm->controlled)
+    outside_fib_index = rx_fib_index;
+
   ip4_address_t sm_addr;
   u16 sm_port;
   u32 sm_fib_index;
@@ -449,7 +509,7 @@ slow_path_ed (vlib_main_t *vm, snat_main_t *sm, vlib_buffer_t *b,
       is_sm = 1;
     }
 
-  if (PREDICT_TRUE (proto == IP_PROTOCOL_TCP))
+  if (PREDICT_TRUE (proto == IP_PROTOCOL_TCP) && !(sm->controlled))
     {
       if (PREDICT_FALSE (!tcp_flags_is_init (
 	    vnet_buffer (b)->ip.reass.icmp_type_or_tcp_flags)))
@@ -493,7 +553,22 @@ slow_path_ed (vlib_main_t *vm, snat_main_t *sm, vlib_buffer_t *b,
 	}
       nat_6t_flow_txfib_rewrite_set (&s->o2i, rx_fib_index);
 
-      if (nat_ed_alloc_addr_and_port (
+      if (sm->controlled)
+        {
+          if (nat_controlled_alloc_addr_and_port (sm, thread_index,  proto,
+                                                  tsm->snat_thread_index, s,
+                                                  &outside_addr,
+                                                  &outside_port,
+                                                  outside_fib_index))
+            {
+              nat_elog_notice (sm, "addresses exhausted");
+              b->error = node->errors[NAT_IN2OUT_ED_ERROR_OUT_OF_PORTS];
+              nat_ed_session_delete (sm, s, thread_index, 1);
+              return NAT_NEXT_DROP;
+            }
+	    sm->nat44_ed_controlled_report_src_port (b, outside_port);
+        }
+      else if (nat_ed_alloc_addr_and_port (
 	    sm, rx_fib_index, tx_sw_if_index, proto, thread_index, l_addr,
 	    r_addr, tsm->snat_thread_index, s, &outside_addr, &outside_port))
 	{
diff --git a/src/plugins/nat/nat44-ed/nat44_ed_inlines.h b/src/plugins/nat/nat44-ed/nat44_ed_inlines.h
index cb4189602..22bf514ee 100644
--- a/src/plugins/nat/nat44-ed/nat44_ed_inlines.h
+++ b/src/plugins/nat/nat44-ed/nat44_ed_inlines.h
@@ -26,6 +26,45 @@
 #include <nat/lib/log.h>
 #include <nat/nat44-ed/nat44_ed.h>
 
+always_inline void
+split_binding_key (u64 key, ip4_address_t * addr, u16 * sport, u16 * eport)
+{
+  if (addr)
+    {
+      addr->as_u32 = key >> 32;
+    }
+  if (sport)
+    {
+      *sport = (key >> 16) & (u16) ~ 0;
+    }
+  if (eport)
+    {
+      *eport = (key & ((1 << 16) - 1));
+    }
+}
+
+always_inline u64
+calc_binding_key (ip4_address_t addr, u16 sport, u16 eport)
+{
+  return (u64) addr.as_u32 << 32 | (u64) sport << 16 | (u64) eport;
+}
+
+always_inline void
+init_binding_k (clib_bihash_kv_8_8_t * kv, ip4_address_t addr, u16 sport,
+                u16 eport)
+{
+  kv->key = calc_binding_key (addr, sport, eport);
+  kv->value = ~0ULL;
+}
+
+always_inline void
+init_binding_kv (clib_bihash_kv_8_8_t * kv, ip4_address_t addr, u16 sport,
+                 u16 eport, u64 value)
+{
+  init_binding_k (kv, addr, sport, eport);
+  kv->value = value;
+}
+
 always_inline void
 init_ed_k (clib_bihash_kv_16_8_t *kv, u32 l_addr, u16 l_port, u32 r_addr,
 	   u16 r_port, u32 fib_index, ip_protocol_t proto)
-- 
2.24.3 (Apple Git-128)

