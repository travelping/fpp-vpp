From 109f18d20e099d62f0fd31a9f2bb9a2a272caee7 Mon Sep 17 00:00:00 2001
From: Sergey Matov <sergey.matov@travelping.com>
Date: Thu, 23 Jun 2022 16:37:59 +0400
Subject: [PATCH] GRE KEY support for tunnel matching

---
 src/plugins/gre/gre.api     |  63 +++++++++++++++++
 src/plugins/gre/gre.c       |  16 ++++-
 src/plugins/gre/gre.h       |  38 ++++++++---
 src/plugins/gre/gre_api.c   | 132 +++++++++++++++++++++++++++++++++++-
 src/plugins/gre/interface.c |  56 ++++++++-------
 src/plugins/gre/node.c      |  97 +++++++++++++++++++-------
 src/vnet/gre/packet.h       |   5 +-
 7 files changed, 344 insertions(+), 63 deletions(-)

diff --git a/src/plugins/gre/gre.api b/src/plugins/gre/gre.api
index 9c69ba400..b8f4aa3db 100644
--- a/src/plugins/gre/gre.api
+++ b/src/plugins/gre/gre.api
@@ -103,6 +103,69 @@ define gre_tunnel_details
   vl_api_gre_tunnel_t tunnel;
 };
 
+typedef gre_tunnel_v2
+{
+  vl_api_gre_tunnel_type_t type;
+  vl_api_tunnel_mode_t mode;
+  vl_api_tunnel_encap_decap_flags_t flags;
+  u16 session_id;
+  u32 instance;
+  u32 outer_table_id;
+  u32 key;
+  u8 capabilities;
+  vl_api_interface_index_t sw_if_index;
+  vl_api_address_t src;
+  vl_api_address_t dst;
+};
+
+/** \brief Add or delete a single GRE tunnel V2 request.
+    @param client_index - opaque cookie to identify the sender.
+    @param context - sender context, to match reply w/ request.
+    @param is_add - add if true, delete if false.
+    @param tunnel - tunnel definition to add or delete.
+*/
+define gre_tunnel_add_del_v2
+{
+  u32 client_index;
+  u32 context;
+  bool is_add;
+  vl_api_gre_tunnel_v2_t tunnel;
+};
+
+/** \brief Add or delete a single GRE tunnel V2 response.
+    @param context - sender context, to match reply w/ request.
+    @param retval - return code for the request.
+    @param sw_if_index - the interface corresponding to the affected tunnel.
+*/
+define gre_tunnel_add_del_v2_reply
+{
+  u32 context;
+  i32 retval;
+  vl_api_interface_index_t sw_if_index;
+};
+
+/** \brief Dump details of all or just a single GRE tunnel V2 request.
+    @param client_index - opaque cookie to identify the sender.
+    @param context - sender context, to match reply w/ request.
+    @param sw_if_index - filter for tunnel of this interface index, ~0 for all.
+*/
+define gre_tunnel_v2_dump
+{
+  u32 client_index;
+  u32 context;
+  vl_api_interface_index_t sw_if_index;
+};
+
+/** \brief Details V2 response for one of the requested GRE tunnels.
+    @param context - sender context, to match reply w/ request.
+    @param tunnel - definition of the dumped tunnel.
+*/
+define gre_tunnel_v2_details
+{
+  u32 context;
+  vl_api_gre_tunnel_v2_t tunnel;
+};
+
 /*
  * Local Variables:
  * eval: (c-set-style "gnu")
diff --git a/src/plugins/gre/gre.c b/src/plugins/gre/gre.c
index a15717475..fee81c2b4 100644
--- a/src/plugins/gre/gre.c
+++ b/src/plugins/gre/gre.c
@@ -232,7 +232,10 @@ gre_build_rewrite (vnet_main_t *vnm, u32 sw_if_index, vnet_link_t link_type,
 
   if (!is_ipv6)
     {
-      vec_validate (rewrite, sizeof (*h4) - 1);
+      if (t->capability_flags & GRE_TUNNEL_KEYED)
+	vec_validate (rewrite, sizeof (*h4) - 1);
+      else
+	vec_validate (rewrite, sizeof (*h4) - 1 - sizeof (u32));
       h4 = (ip4_and_gre_header_t *) rewrite;
       gre = &h4->gre;
       h4->ip4.ip_version_and_header_length = 0x45;
@@ -245,7 +248,10 @@ gre_build_rewrite (vnet_main_t *vnm, u32 sw_if_index, vnet_link_t link_type,
     }
   else
     {
-      vec_validate (rewrite, sizeof (*h6) - 1);
+      if (t->capability_flags & GRE_TUNNEL_KEYED)
+        vec_validate (rewrite, sizeof (*h6) - 1);
+      else
+        vec_validate (rewrite, sizeof (*h6) - 1 - sizeof (u32));
       h6 = (ip6_and_gre_header_t *) rewrite;
       gre = &h6->gre;
       h6->ip6.ip_version_traffic_class_and_flow_label =
@@ -259,6 +265,12 @@ gre_build_rewrite (vnet_main_t *vnm, u32 sw_if_index, vnet_link_t link_type,
       h6->ip6.dst_address.as_u64[1] = dst->ip6.as_u64[1];
     }
 
+  if (t->capability_flags & GRE_TUNNEL_KEYED)
+    {
+      gre->flags_and_version =  clib_host_to_net_u16 (GRE_FLAGS_KEY);
+      gre->key = clib_host_to_net_u32 (t->gre_key);
+    }
+
   if (PREDICT_FALSE (t->type == GRE_TUNNEL_TYPE_ERSPAN))
     {
       gre->protocol = clib_host_to_net_u16 (GRE_PROTOCOL_erspan);
diff --git a/src/plugins/gre/gre.h b/src/plugins/gre/gre.h
index 9e17efcf7..0da95ee01 100644
--- a/src/plugins/gre/gre.h
+++ b/src/plugins/gre/gre.h
@@ -26,6 +26,8 @@
 #include <vnet/tunnel/tunnel.h>
 #include <vnet/teib/teib.h>
 
+#define GRE_TUNNEL_KEYED	1
+
 extern vnet_hw_interface_class_t gre_hw_interface_class;
 extern vnet_hw_interface_class_t mgre_hw_interface_class;
 
@@ -62,7 +64,6 @@ typedef enum gre_tunnel_type_t_
 
 extern u8 *format_gre_tunnel_type (u8 * s, va_list * args);
 
-
 /**
  * A GRE payload protocol registration
  */
@@ -95,14 +96,16 @@ typedef struct gre_tunnel_key_common_t_
     {
       u32 fib_index;
       u16 session_id;
-      gre_tunnel_type_t type;
       tunnel_mode_t mode;
+      u8 type:7;
+      u8 is_keyed:1;
     };
     u64 as_u64;
   };
-} gre_tunnel_key_common_t;
+  u32 gre_key;
+} __attribute__ ((packed)) gre_tunnel_key_common_t;
 
-STATIC_ASSERT_SIZEOF (gre_tunnel_key_common_t, sizeof (u64));
+STATIC_ASSERT_SIZEOF (gre_tunnel_key_common_t, sizeof (u64)  + sizeof (u32));
 
 /**
  * @brief Key for a IPv4 GRE Tunnel
@@ -126,7 +129,7 @@ typedef struct gre_tunnel_key4_t_
   gre_tunnel_key_common_t gtk_common;
 } __attribute__ ((packed)) gre_tunnel_key4_t;
 
-STATIC_ASSERT_SIZEOF (gre_tunnel_key4_t, 2 * sizeof (u64));
+STATIC_ASSERT_SIZEOF (gre_tunnel_key4_t, 2 * sizeof (u64) + sizeof (u32));
 
 /**
  * @brief Key for a IPv6 GRE Tunnel
@@ -144,7 +147,7 @@ typedef struct gre_tunnel_key6_t_
   gre_tunnel_key_common_t gtk_common;
 } __attribute__ ((packed)) gre_tunnel_key6_t;
 
-STATIC_ASSERT_SIZEOF (gre_tunnel_key6_t, 5 * sizeof (u64));
+STATIC_ASSERT_SIZEOF (gre_tunnel_key6_t, 5 * sizeof (u64) + sizeof (u32));
 
 /**
  * Union of the two possible key types
@@ -177,6 +180,7 @@ typedef struct
   ip46_address_t src;
   ip46_address_t dst;
   u32 fib_index;
+  u32 gre_key;
 } gre_sn_key_t;
 
 /**
@@ -228,6 +232,8 @@ typedef struct
 
   u32 dev_instance;		/* Real device instance in tunnel vector */
   u32 user_instance;		/* Instance name being shown to user */
+  u32 gre_key;
+  u8 capability_flags;
 } gre_tunnel_t;
 
 typedef struct
@@ -372,6 +378,8 @@ typedef struct
   u32 outer_table_id;
   u16 session_id;
   tunnel_encap_decap_flags_t flags;
+  u32 gre_key;
+  u8 capabilities;
 } vnet_gre_tunnel_add_del_args_t;
 
 extern int vnet_gre_tunnel_add_del (vnet_gre_tunnel_add_del_args_t * a,
@@ -382,14 +390,18 @@ gre_mk_key4 (ip4_address_t src,
 	     ip4_address_t dst,
 	     u32 fib_index,
 	     gre_tunnel_type_t ttype,
-	     tunnel_mode_t tmode, u16 session_id, gre_tunnel_key4_t * key)
+	     tunnel_mode_t tmode, u16 session_id,
+	     u32 gre_key, gre_tunnel_key4_t * key,
+	     u8 is_keyed)
 {
   key->gtk_src = src;
   key->gtk_dst = dst;
+  key->gtk_common.gre_key = gre_key;
   key->gtk_common.type = ttype;
   key->gtk_common.mode = tmode;
   key->gtk_common.fib_index = fib_index;
   key->gtk_common.session_id = session_id;
+  key->gtk_common.is_keyed = is_keyed;
 }
 
 static inline int
@@ -397,7 +409,8 @@ gre_match_key4 (const gre_tunnel_key4_t * key1,
 		const gre_tunnel_key4_t * key2)
 {
   return ((key1->gtk_as_u64 == key2->gtk_as_u64) &&
-	  (key1->gtk_common.as_u64 == key2->gtk_common.as_u64));
+	  (key1->gtk_common.as_u64 == key2->gtk_common.as_u64) &&
+	  (key1->gtk_common.gre_key == key2->gtk_common.gre_key));
 }
 
 static inline void
@@ -405,14 +418,18 @@ gre_mk_key6 (const ip6_address_t * src,
 	     const ip6_address_t * dst,
 	     u32 fib_index,
 	     gre_tunnel_type_t ttype,
-	     tunnel_mode_t tmode, u16 session_id, gre_tunnel_key6_t * key)
+	     tunnel_mode_t tmode, u16 session_id,
+	     u32 gre_key, gre_tunnel_key6_t * key,
+	     u8 is_keyed)
 {
   key->gtk_src = *src;
   key->gtk_dst = *dst;
+  key->gtk_common.gre_key = gre_key;
   key->gtk_common.type = ttype;
   key->gtk_common.mode = tmode;
   key->gtk_common.fib_index = fib_index;
   key->gtk_common.session_id = session_id;
+  key->gtk_common.is_keyed = is_keyed;
 }
 
 static inline int
@@ -421,7 +438,8 @@ gre_match_key6 (const gre_tunnel_key6_t * key1,
 {
   return (ip6_address_is_equal (&key1->gtk_src, &key2->gtk_src) &&
 	  ip6_address_is_equal (&key1->gtk_dst, &key2->gtk_dst) &&
-	  (key1->gtk_common.as_u64 == key2->gtk_common.as_u64));
+	  (key1->gtk_common.as_u64 == key2->gtk_common.as_u64) &&
+	  (key1->gtk_common.gre_key == key2->gtk_common.gre_key));
 }
 
 static inline void
diff --git a/src/plugins/gre/gre_api.c b/src/plugins/gre/gre_api.c
index f8e3ea654..4a7f2cff4 100644
--- a/src/plugins/gre/gre_api.c
+++ b/src/plugins/gre/gre_api.c
@@ -124,8 +124,72 @@ out:
   /* *INDENT-ON* */
 }
 
-static void
-send_gre_tunnel_details (gre_tunnel_t *t, vl_api_gre_tunnel_dump_t *mp)
+static void 
+vl_api_gre_tunnel_add_del_v2_t_handler (vl_api_gre_tunnel_add_del_v2_t * mp)
+{
+  vnet_gre_tunnel_add_del_args_t _a = { }, *a = &_a;
+  vl_api_gre_tunnel_add_del_v2_reply_t *rmp;
+  tunnel_encap_decap_flags_t flags;
+  u32 sw_if_index = ~0;
+  ip46_type_t itype[2];
+  int rv = 0;
+
+  itype[0] = ip_address_decode (&mp->tunnel.src, &a->src);
+  itype[1] = ip_address_decode (&mp->tunnel.dst, &a->dst);
+
+  if (itype[0] != itype[1])
+    {
+      rv = VNET_API_ERROR_INVALID_PROTOCOL;
+      goto out;
+    }
+
+  if (ip46_address_is_equal (&a->src, &a->dst))
+    {
+      rv = VNET_API_ERROR_SAME_SRC_DST;
+      goto out;
+    }
+
+  rv = gre_tunnel_type_decode (mp->tunnel.type, &a->type);
+
+  if (rv)
+    goto out;
+
+  rv = tunnel_mode_decode (mp->tunnel.mode, &a->mode);
+
+  if (rv)
+    goto out;
+
+  if (rv)
+    goto out;
+
+  rv = tunnel_encap_decap_flags_decode (mp->tunnel.flags, &flags);
+
+  if (rv)
+    goto out;
+
+  a->is_add = mp->is_add;
+  a->is_ipv6 = (itype[0] == IP46_TYPE_IP6);
+  a->instance = ntohl (mp->tunnel.instance);
+  a->session_id = ntohs (mp->tunnel.session_id);
+  a->outer_table_id = ntohl (mp->tunnel.outer_table_id);
+  a->flags = flags;
+  a->gre_key = clib_net_to_host_u32 (mp->tunnel.key);
+  a->capabilities = mp->tunnel.capabilities;
+
+  rv = vnet_gre_tunnel_add_del (a, &sw_if_index);
+
+out:
+  /* *INDENT-OFF* */
+  REPLY_MACRO2(VL_API_GRE_TUNNEL_ADD_DEL_V2_REPLY,
+  ({
+    rmp->sw_if_index = ntohl (sw_if_index);
+  }));
+  /* *INDENT-ON* */
+}
+
+
+static void send_gre_tunnel_details
+  (gre_tunnel_t * t, vl_api_gre_tunnel_dump_t * mp)
 {
   vl_api_gre_tunnel_details_t *rmp;
 
@@ -185,6 +249,70 @@ vl_api_gre_tunnel_dump_t_handler (vl_api_gre_tunnel_dump_t *mp)
     }
 }
 
+
+static void send_gre_tunnel_details_v2
+  (gre_tunnel_t * t, vl_api_gre_tunnel_v2_dump_t * mp)
+{
+  vl_api_gre_tunnel_v2_details_t *rmp;
+
+  /* *INDENT-OFF* */
+  REPLY_MACRO_DETAILS2(VL_API_GRE_TUNNEL_V2_DETAILS,
+  ({
+    ip_address_encode (&t->tunnel_src, IP46_TYPE_ANY, &rmp->tunnel.src);
+    ip_address_encode (&t->tunnel_dst.fp_addr, IP46_TYPE_ANY, &rmp->tunnel.dst);
+
+    rmp->tunnel.outer_table_id =
+      htonl (fib_table_get_table_id
+             (t->outer_fib_index, t->tunnel_dst.fp_proto));
+
+    rmp->tunnel.type = gre_tunnel_type_encode (t->type);
+    rmp->tunnel.mode = tunnel_mode_encode (t->mode);
+    rmp->tunnel.flags = tunnel_encap_decap_flags_encode (t->flags);
+    rmp->tunnel.instance = htonl (t->user_instance);
+    rmp->tunnel.sw_if_index = htonl (t->sw_if_index);
+    rmp->tunnel.session_id = htons (t->session_id);
+    rmp->tunnel.key = clib_host_to_net_u32 (t->gre_key);
+    rmp->tunnel.capabilities = t->capability_flags;
+  }));
+  /* *INDENT-ON* */
+}
+
+static void
+vl_api_gre_tunnel_v2_dump_t_handler (vl_api_gre_tunnel_v2_dump_t * mp)
+{
+  vl_api_registration_t *reg;
+  gre_main_t *gm = &gre_main;
+  gre_tunnel_t *t;
+  u32 sw_if_index;
+
+  reg = vl_api_client_index_to_registration (mp->client_index);
+  if (!reg)
+    return;
+
+  sw_if_index = ntohl (mp->sw_if_index);
+
+  if (~0 == sw_if_index)
+    {
+      /* *INDENT-OFF* */
+      pool_foreach (t, gm->tunnels)
+       {
+        send_gre_tunnel_details_v2(t, mp);
+      }
+      /* *INDENT-ON* */
+    }
+
+  else
+    {
+      if ((sw_if_index >= vec_len (gm->tunnel_index_by_sw_if_index)) ||
+          (~0 == gm->tunnel_index_by_sw_if_index[sw_if_index]))
+        {
+          return;
+        }
+      t = &gm->tunnels[gm->tunnel_index_by_sw_if_index[sw_if_index]];
+      send_gre_tunnel_details_v2 (t, mp);
+    }
+}
+
 /*
  * gre_api_hookup
  * Add vpe's API message handlers to the table.
diff --git a/src/plugins/gre/interface.c b/src/plugins/gre/interface.c
index 8d93ebd0c..f9e553c54 100644
--- a/src/plugins/gre/interface.c
+++ b/src/plugins/gre/interface.c
@@ -48,11 +48,11 @@ format_gre_tunnel (u8 *s, va_list *args)
 {
   gre_tunnel_t *t = va_arg (*args, gre_tunnel_t *);
 
-  s = format (s, "[%d] instance %d src %U dst %U fib-idx %d sw-if-idx %d ",
-	      t->dev_instance, t->user_instance, format_ip46_address,
-	      &t->tunnel_src, IP46_TYPE_ANY, format_ip46_address,
-	      &t->tunnel_dst.fp_addr, IP46_TYPE_ANY, t->outer_fib_index,
-	      t->sw_if_index);
+  s = format (s, "[%d] instance %d src %U dst %U fib-idx %d sw-if-idx %d key %d ",
+	      t->dev_instance, t->user_instance,
+	      format_ip46_address, &t->tunnel_src, IP46_TYPE_ANY,
+	      format_ip46_address, &t->tunnel_dst.fp_addr, IP46_TYPE_ANY,
+	      t->outer_fib_index, t->sw_if_index, ((t->capability_flags & GRE_TUNNEL_KEYED) ? t->gre_key : -1));
 
   s = format (s, "payload %U ", format_gre_tunnel_type, t->type);
   s = format (s, "%U ", format_tunnel_mode, t->mode);
@@ -75,14 +75,14 @@ gre_tunnel_db_find (const vnet_gre_tunnel_add_del_args_t *a,
 
   if (!a->is_ipv6)
     {
-      gre_mk_key4 (a->src.ip4, a->dst.ip4, outer_fib_index, a->type, a->mode,
-		   a->session_id, &key->gtk_v4);
+      gre_mk_key4 (a->src.ip4, a->dst.ip4, outer_fib_index,
+		   a->type, a->mode, a->session_id, a->gre_key, &key->gtk_v4, (a->capabilities & GRE_TUNNEL_KEYED));
       p = hash_get_mem (gm->tunnel_by_key4, &key->gtk_v4);
     }
   else
     {
-      gre_mk_key6 (&a->src.ip6, &a->dst.ip6, outer_fib_index, a->type, a->mode,
-		   a->session_id, &key->gtk_v6);
+      gre_mk_key6 (&a->src.ip6, &a->dst.ip6, outer_fib_index,
+		   a->type, a->mode, a->session_id, a->gre_key, &key->gtk_v6, (a->capabilities & GRE_TUNNEL_KEYED));
       p = hash_get_mem (gm->tunnel_by_key6, &key->gtk_v6);
     }
 
@@ -245,13 +245,15 @@ gre_teib_mk_key (const gre_tunnel_t *t, const teib_entry_t *ne,
 
   /* construct the key using mode P2P so it can be found in the DP */
   if (FIB_PROTOCOL_IP4 == nh->fp_proto)
-    gre_mk_key4 (t->tunnel_src.ip4, nh->fp_addr.ip4,
-		 teib_entry_get_fib_index (ne), t->type, TUNNEL_MODE_P2P, 0,
-		 &key->gtk_v4);
+    gre_mk_key4 (t->tunnel_src.ip4,
+		 nh->fp_addr.ip4,
+		 teib_entry_get_fib_index (ne),
+		 t->type, TUNNEL_MODE_P2P, 0, t->gre_key, &key->gtk_v4, (t->capability_flags & GRE_TUNNEL_KEYED));
   else
-    gre_mk_key6 (&t->tunnel_src.ip6, &nh->fp_addr.ip6,
-		 teib_entry_get_fib_index (ne), t->type, TUNNEL_MODE_P2P, 0,
-		 &key->gtk_v6);
+    gre_mk_key6 (&t->tunnel_src.ip6,
+		 &nh->fp_addr.ip6,
+		 teib_entry_get_fib_index (ne),
+		 t->type, TUNNEL_MODE_P2P, 0, t->gre_key, &key->gtk_v6, (t->capability_flags & GRE_TUNNEL_KEYED));
 }
 
 /**
@@ -392,6 +394,9 @@ vnet_gre_tunnel_add (vnet_gre_tunnel_add_del_args_t *a, u32 outer_fib_index,
   t->type = a->type;
   t->mode = a->mode;
   t->flags = a->flags;
+  t->capability_flags = a->capabilities;
+  if (t->capability_flags & GRE_TUNNEL_KEYED)
+    t->gre_key = a->gre_key;
   if (t->type == GRE_TUNNEL_TYPE_ERSPAN)
     t->session_id = a->session_id;
 
@@ -441,15 +446,14 @@ vnet_gre_tunnel_add (vnet_gre_tunnel_add_del_args_t *a, u32 outer_fib_index,
   gm->tunnel_index_by_sw_if_index[sw_if_index] = t_idx;
 
   if (!is_ipv6)
-    {
-      hi->frame_overhead = sizeof (gre_header_t) + sizeof (ip4_header_t);
-      hi->min_frame_size = hi->frame_overhead + 64;
-    }
+    hi->frame_overhead = sizeof (gre_header_t) - sizeof (u32) + sizeof (ip4_header_t);
   else
-    {
-      hi->frame_overhead = sizeof (gre_header_t) + sizeof (ip6_header_t);
-      hi->min_frame_size = hi->frame_overhead + 64;
-    }
+    hi->frame_overhead = sizeof (gre_header_t) - sizeof (u32) + sizeof (ip6_header_t);
+
+  if (t->capability_flags & GRE_TUNNEL_KEYED)
+    hi->frame_overhead += sizeof (u32);
+
+  hi->min_frame_size = hi->frame_overhead + 64;
 
   /* Standard default gre MTU. */
   vnet_sw_interface_set_mtu (vnm, sw_if_index, 9000);
@@ -645,6 +649,8 @@ create_gre_tunnel_command_fn (vlib_main_t *vm, unformat_input_t *input,
   int rv;
   u8 is_add = 1;
   u32 sw_if_index;
+  u32 key = 0;
+  u8 caps = 0;
   clib_error_t *error = NULL;
 
   /* Get a line of input. */
@@ -663,6 +669,8 @@ create_gre_tunnel_command_fn (vlib_main_t *vm, unformat_input_t *input,
 	;
       else if (unformat (line_input, "outer-table-id %d", &outer_table_id))
 	;
+     else if (unformat (line_input, "key %d", &key))
+        caps = GRE_TUNNEL_KEYED;
       else if (unformat (line_input, "multipoint"))
 	t_mode = TUNNEL_MODE_MP;
       else if (unformat (line_input, "teb"))
@@ -713,6 +721,8 @@ create_gre_tunnel_command_fn (vlib_main_t *vm, unformat_input_t *input,
   a->is_ipv6 = !ip46_address_is_ip4 (&src);
   a->instance = instance;
   a->flags = flags;
+  a->gre_key = key;
+  a->capabilities = caps;
   clib_memcpy (&a->src, &src, sizeof (a->src));
   clib_memcpy (&a->dst, &dst, sizeof (a->dst));
 
diff --git a/src/plugins/gre/node.c b/src/plugins/gre/node.c
index 7ee22c3cb..da95f6d3a 100644
--- a/src/plugins/gre/node.c
+++ b/src/plugins/gre/node.c
@@ -156,6 +156,8 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
       gre_tunnel_key_t key[2];
       u8 matched[2];
       u32 tun_sw_if_index[2];
+      u32 gre_key[2];
+      u8 is_keyed[2];
 
       if (PREDICT_TRUE (n_left_from >= 6))
 	{
@@ -172,8 +174,8 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
 	  ip6[1] = vlib_buffer_get_current (b[1]);
 	  gre[0] = (void *) (ip6[0] + 1);
 	  gre[1] = (void *) (ip6[1] + 1);
-	  vlib_buffer_advance (b[0], sizeof (*ip6[0]) + sizeof (*gre[0]));
-	  vlib_buffer_advance (b[1], sizeof (*ip6[0]) + sizeof (*gre[0]));
+	  vlib_buffer_advance (b[0], sizeof (*ip6[0]) + sizeof (*gre[0]) - sizeof (u32));
+	  vlib_buffer_advance (b[1], sizeof (*ip6[0]) + sizeof (*gre[0]) - sizeof (u32));
 	}
       else
 	{
@@ -182,8 +184,8 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
 	  ip4[1] = vlib_buffer_get_current (b[1]);
 	  gre[0] = (void *) (ip4[0] + 1);
 	  gre[1] = (void *) (ip4[1] + 1);
-	  vlib_buffer_advance (b[0], sizeof (*ip4[0]) + sizeof (*gre[0]));
-	  vlib_buffer_advance (b[1], sizeof (*ip4[0]) + sizeof (*gre[0]));
+	  vlib_buffer_advance (b[0], sizeof (*ip4[0]) + sizeof (*gre[0]) - sizeof (u32));
+	  vlib_buffer_advance (b[1], sizeof (*ip4[0]) + sizeof (*gre[0]) - sizeof (u32));
 	}
 
       if (PREDICT_TRUE (cached_protocol == gre[0]->protocol))
@@ -223,6 +225,32 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
 
       version[0] = clib_net_to_host_u16 (gre[0]->flags_and_version);
       version[1] = clib_net_to_host_u16 (gre[1]->flags_and_version);
+
+      /* Check if the KEY flag is present before clearing the flags */
+      if (version[0] & GRE_FLAGS_KEY)
+	{
+	  gre_key[0] = clib_net_to_host_u32 (gre[0]->key);
+	  is_keyed[0] = 1;
+	  vlib_buffer_advance (b[0], sizeof (u32));
+	}
+      else
+	{
+	  gre_key[0] = 0;
+	  is_keyed[0] = 0;
+	}
+
+      if (version[1] & GRE_FLAGS_KEY)
+	{
+          gre_key[1] = clib_net_to_host_u32 (gre[1]->key);
+	  is_keyed[1] = 1;
+	  vlib_buffer_advance (b[1], sizeof (u32));
+	}
+      else
+        {
+          gre_key[1] = 0;
+          is_keyed[1] = 0;
+        }
+
       version[0] &= GRE_VERSION_MASK;
       version[1] &= GRE_VERSION_MASK;
 
@@ -239,23 +267,27 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
       /* always search for P2P types in the DP */
       if (is_ipv6)
 	{
-	  gre_mk_key6 (&ip6[0]->dst_address, &ip6[0]->src_address,
-		       vnet_buffer (b[0])->ip.fib_index, type[0],
-		       TUNNEL_MODE_P2P, 0, &key[0].gtk_v6);
-	  gre_mk_key6 (&ip6[1]->dst_address, &ip6[1]->src_address,
-		       vnet_buffer (b[1])->ip.fib_index, type[1],
-		       TUNNEL_MODE_P2P, 0, &key[1].gtk_v6);
+	  gre_mk_key6 (&ip6[0]->dst_address,
+		       &ip6[0]->src_address,
+		       vnet_buffer (b[0])->ip.fib_index,
+		       type[0], TUNNEL_MODE_P2P, 0, gre_key[0], &key[0].gtk_v6, is_keyed[0]);
+	  gre_mk_key6 (&ip6[1]->dst_address,
+		       &ip6[1]->src_address,
+		       vnet_buffer (b[1])->ip.fib_index,
+		       type[1], TUNNEL_MODE_P2P, 0, gre_key[1], &key[1].gtk_v6, is_keyed[1]);
 	  matched[0] = gre_match_key6 (&cached_key.gtk_v6, &key[0].gtk_v6);
 	  matched[1] = gre_match_key6 (&cached_key.gtk_v6, &key[1].gtk_v6);
 	}
       else
 	{
-	  gre_mk_key4 (ip4[0]->dst_address, ip4[0]->src_address,
-		       vnet_buffer (b[0])->ip.fib_index, type[0],
-		       TUNNEL_MODE_P2P, 0, &key[0].gtk_v4);
-	  gre_mk_key4 (ip4[1]->dst_address, ip4[1]->src_address,
-		       vnet_buffer (b[1])->ip.fib_index, type[1],
-		       TUNNEL_MODE_P2P, 0, &key[1].gtk_v4);
+	  gre_mk_key4 (ip4[0]->dst_address,
+		       ip4[0]->src_address,
+		       vnet_buffer (b[0])->ip.fib_index,
+		       type[0], TUNNEL_MODE_P2P, 0, gre_key[0], &key[0].gtk_v4, is_keyed[0]);
+	  gre_mk_key4 (ip4[1]->dst_address,
+		       ip4[1]->src_address,
+		       vnet_buffer (b[1])->ip.fib_index,
+		       type[1], TUNNEL_MODE_P2P, 0, gre_key[1], &key[1].gtk_v4, is_keyed[1]);
 	  matched[0] = gre_match_key4 (&cached_key.gtk_v4, &key[0].gtk_v4);
 	  matched[1] = gre_match_key4 (&cached_key.gtk_v4, &key[1].gtk_v4);
 	}
@@ -316,6 +348,8 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
       gre_tunnel_key_t key[1];
       u8 matched[1];
       u32 tun_sw_if_index[1];
+      u32 gre_key[1];
+      u8 is_keyed[1];
 
       if (PREDICT_TRUE (n_left_from >= 3))
 	{
@@ -328,14 +362,14 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
 	  /* ip6_local hands us the ip header, not the gre header */
 	  ip6[0] = vlib_buffer_get_current (b[0]);
 	  gre[0] = (void *) (ip6[0] + 1);
-	  vlib_buffer_advance (b[0], sizeof (*ip6[0]) + sizeof (*gre[0]));
+	  vlib_buffer_advance (b[0], sizeof (*ip6[0]) + sizeof (*gre[0]) - sizeof (u32));
 	}
       else
 	{
 	  /* ip4_local hands us the ip header, not the gre header */
 	  ip4[0] = vlib_buffer_get_current (b[0]);
 	  gre[0] = (void *) (ip4[0] + 1);
-	  vlib_buffer_advance (b[0], sizeof (*ip4[0]) + sizeof (*gre[0]));
+	  vlib_buffer_advance (b[0], sizeof (*ip4[0]) + sizeof (*gre[0]) - sizeof (u32));
 	}
 
       if (PREDICT_TRUE (cached_protocol == gre[0]->protocol))
@@ -358,6 +392,19 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
 			    node->errors[GRE_ERROR_NONE];
 
       version[0] = clib_net_to_host_u16 (gre[0]->flags_and_version);
+
+      if (version[0] & GRE_FLAGS_KEY)
+	{
+	  gre_key[0] = clib_net_to_host_u32 (gre[0]->key);
+	  is_keyed[0] = 1;
+	  vlib_buffer_advance (b[0], sizeof (u32));
+	}
+      else
+        {
+          gre_key[0] = 0;
+          is_keyed[0] = 0;
+        }
+
       version[0] &= GRE_VERSION_MASK;
 
       b[0]->error =
@@ -368,16 +415,18 @@ gre_input (vlib_main_t *vm, vlib_node_runtime_t *node, vlib_frame_t *frame,
 
       if (is_ipv6)
 	{
-	  gre_mk_key6 (&ip6[0]->dst_address, &ip6[0]->src_address,
-		       vnet_buffer (b[0])->ip.fib_index, type[0],
-		       TUNNEL_MODE_P2P, 0, &key[0].gtk_v6);
+	  gre_mk_key6 (&ip6[0]->dst_address,
+		       &ip6[0]->src_address,
+		       vnet_buffer (b[0])->ip.fib_index,
+		       type[0], TUNNEL_MODE_P2P, 0, gre_key[0], &key[0].gtk_v6, is_keyed[0]);
 	  matched[0] = gre_match_key6 (&cached_key.gtk_v6, &key[0].gtk_v6);
 	}
       else
 	{
-	  gre_mk_key4 (ip4[0]->dst_address, ip4[0]->src_address,
-		       vnet_buffer (b[0])->ip.fib_index, type[0],
-		       TUNNEL_MODE_P2P, 0, &key[0].gtk_v4);
+	  gre_mk_key4 (ip4[0]->dst_address,
+		       ip4[0]->src_address,
+		       vnet_buffer (b[0])->ip.fib_index,
+		       type[0], TUNNEL_MODE_P2P, 0, gre_key[0], &key[0].gtk_v4, is_keyed[0]);
 	  matched[0] = gre_match_key4 (&cached_key.gtk_v4, &key[0].gtk_v4);
 	}
 
diff --git a/src/vnet/gre/packet.h b/src/vnet/gre/packet.h
index bbd67d565..11a840a21 100644
--- a/src/vnet/gre/packet.h
+++ b/src/vnet/gre/packet.h
@@ -34,7 +34,7 @@ typedef enum
 #undef _
 } gre_protocol_t;
 
-typedef struct
+typedef CLIB_PACKED (struct
 {
   /* flags and version */
   u16 flags_and_version;
@@ -53,7 +53,8 @@ typedef struct
 
   /* 0x800 for ip4, etc. */
   u16 protocol;
-} gre_header_t;
+  u32 key;
+}) gre_header_t;
 
 /* From draft-foschiano-erspan-03.txt
 
-- 
2.45.2

